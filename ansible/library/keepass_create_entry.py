#!/usr/bin/python

# Copyright: (c) 2024, Michał Wojciechowski <mic.wojciechowski@gmail.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import (absolute_import, division, print_function)
from ansible.module_utils.basic import AnsibleModule, missing_required_lib
from ansible.module_utils.keepass_func import check_pykeepass_present, check_variables, open_database, attempt_lock, get_group, create_group, create_entry, get_entry, check_entry_needs_change
import datetime

pykeepass_present, LIB_IMPORT_ERR = check_pykeepass_present()

__metaclass__ = type

DOCUMENTATION = r'''
---
module: keepass_create_entry

short_description: This module creates entry in a KeePass database.

# If this is part of a collection, you need to use semantic versioning,
# i.e. the version is of the form "2.5.0" and not "2.4".
version_added: "1.0.0"

description: This module creates entry in a KeePass database.

options:
    database:
        description:
            - "Path to KeePass database. Alternative name: path."
        required: true
        type: str
    password:
        description:
            - "Password of KeePass database. Required if keyfile is not defined."
        required: false
        type: str
    keyfile:
        description:
            - "Path to the KeePass keyfile. Must already exist. Required if password is not defined."
        required: false
        type: str
    timeout:
        description:
            - "Time before aquiring lock to database file fails (in seconds)."
        required: false
        default: 60
        type: int
    entry:
        description:
            - "Entry to be added to KeePass database."
        required: true
        type: list
        elements: dict
        suboptions:
            title:
                description:
                    - "Title of entry."
                required: true
                type: str
            group:
                description:
                    - "Path to the group where entry must be added. Each group must by separated by '/'. Example: test-group/subgroup/subsubgroup."
                required: false
                default: root group
                type: str
            username:
                description:
                    - "Username of entry."
                required: false
                type: str
            password:
                description:
                    - "Password of entry."
                required: false
                type: str
            url:
                description:
                    - "URL of entry."
                required: false
                type: str
            expiry_time:
                description:
                    - "Entry expiry time. Must be in format: 'YYYY-MM-DD HH:MM:SS+TZOFFSET' (see examples below)."
                required: false
                type: str
            notes:
                description:
                    - "Entry notes."
                required: false
                type: str
            tags:
                description:
                    - "Entry tags. Must be comma separated."
                required: false
                type: str
            force_creation:
                description:
                    - "Always create new entry."
                required: false
                type: bool
                default: false


author:
    - Michał Wojciechowski (@Michercik)
'''

EXAMPLES = r'''
- name: Create test entry
  keepass_create_entry:
    database: "/tmp/database.kdbx"
    password: "test-password"
    entry:
        title: "test"
        username: "test-user"
        password: "test-userpassword"

- name: Force create entry
  keepass_create_entry:
    database: "/tmp/database.kdbx"
    keyfile: "/tmp/keyfile.key"
    timeout: 180
    entry:
        title: "test"
        group: "test-group"
        username: "test-user"
        password: "test-userpassword"
        url: "https://testdomain.localhost"
        expiry_time: "2024-01-31 12:30:00+02:00"
        notes: "Generated by ansible"
        tags: "forced,test"
        force_creation: true
'''

RETURN = r'''
# These are examples of possible return values, and in general should use other names for return values.
database:
    description: Path to the KeePass database.
    type: str
entry:
    description: Details about added entry.
    type: dict
msg:
    description: The output message that the module generates.
    type: str
'''

def run_module():
    # define available arguments/parameters a user can pass to the module
    module_args = dict(
        database=dict(type='str', required=False),
        path=dict(type='str', required=False),
        password=dict(type='str', no_log=True),
        keyfile=dict(type='str', no_log=True),
        timeout=dict(type='int', default=60),
        entry=dict(
            type='dict',
            required=True,
            options=dict(
                title=dict(type='str', required=True),
                group=dict(type='str', required=False),
                username=dict(type='str', required=False),
                password=dict(type='str', required=False, no_log=True),
                url=dict(type='str', required=False),
                expiry_time=dict(type='str', required=False),
                notes=dict(type='str', required=False),
                tags=dict(type='str', required=False),
                force_creation=dict(type='bool', required=False, default=False)
            )
        )
    )


    # seed the result dict in the object
    # we primarily care about changed and state
    # changed is if this module effectively modified the target
    # state will include any data that you want your module to pass back
    # for consumption, for example, in a subsequent task
    result = dict(
        changed=False,
        database='',
        entry='',
        msg=''
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if the module
    # supports check mode
    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    if not pykeepass_present:
        module.fail_json(msg=missing_required_lib("pykeepass"), exception=LIB_IMPORT_ERR)

    database            = module.params['database']
    path                = module.params['path']
    password            = module.params['password']
    keyfile             = module.params['keyfile']
    timeout             = module.params['timeout']
    entry               = module.params['entry']

    entry_group         = entry['group']
    entry_title         = entry['title']
    entry_username      = entry['username']
    entry_password      = entry['password']
    entry_url           = entry['url']
    entry_notes         = entry['notes']
    entry_tags          = entry['tags']
    force_creation      = entry['force_creation']
    if entry['expiry_time']:
        try:
            entry_expiry_time = datetime.datetime.strptime(entry['expiry_time'], "%Y-%m-%d %H:%M:%S%z")
        except ValueError:
            module.fail_json(msg=f"Time format of expiry_time must be: YYYY-MM-DD HH:MM:SS+TZOFFSET. Example: 2024-01-31 12:30:00+02:00 (given value: {entry['expiry_time']})")
    else:
        entry_expiry_time = entry['expiry_time']

    check_variables(module, database, path, 'database', 'path')
    check_variables(module, password, keyfile, 'password', 'keyfile')

    database = database if database else path

    with attempt_lock(module, database, timeout):

        kp = open_database(module, database, password, keyfile)

        if module.check_mode:
            if (
                get_entry(kp, entry_title, entry_group, False)
                and not check_entry_needs_change(kp, entry_group, entry_title, entry_username, entry_password, entry_url, entry_expiry_time, entry_notes, entry_tags)
                and not force_creation
            ):
                module.exit_json(changed=False, msg=f"Entry '{entry_title}' in '{entry_group}' already exists.")

        if not module.check_mode:
            try:
                if not get_group(kp, entry_group, True):
                    create_group(kp, entry_group)

                creation = create_entry(kp, entry_group, entry_title, entry_username, entry_password, entry_url, entry_expiry_time, entry_notes, entry_tags, force_creation)
                if not creation:
                    module.exit_json(changed=False, msg=f"Entry '{entry_title}' in '{entry_group}' already exists.")
            except Exception as e:
                module.fail_json(msg=f"An unexpected error occurred: {str(e)}")

        result['changed'] = True
        result['database'] = database
        result['entry'] = entry
        result['msg'] = "Entry successfuly created."

        # in the event of a successful module execution, you will want to
        # simple AnsibleModule.exit_json(), passing the key/value results
        module.exit_json(**result)


def main():
    run_module()


if __name__ == '__main__':
    main()
