---
- name: Nomad | Copy certificate on server (or both) nodes
  when: nomad_node_role in ['server', 'both']
  block:
    - name: "Nomad Policy | Get policies list"
      ansible.builtin.uri:
        url: "{{ nomad_http_scheme }}://{{ nomad_http_ip }}:{{ nomad_http_port }}/v1/acl/policies"
        ca_path: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_ca_pubkey }}"
        client_cert: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_cert_server }}"
        client_key: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_privatekey_server }}"
        method: GET
        headers:
          X-Nomad-Token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_management_token', missing='error') }}"
        status_code:
          - 200
          - 404
        return_content: true
      register: nomad_policies_list_raw

    - name: Debug nomad_policies_list_raw (for auto eligibility)
      ansible.builtin.debug:
        msg: "{{ nomad_policies_list_raw.json }}"

    - name: "Nomad Policy | Set policies list fact"
      ansible.builtin.set_fact:
        nomad_policies_list: "{{ nomad_policies_list_raw.json | community.general.json_query('[*].Name') | string }}"

    - name: "Nomad Policy | Create policy for Nomad access autoeligibility"
      ansible.builtin.uri:
        url: "{{ nomad_http_scheme }}://{{ nomad_http_ip }}:{{ nomad_http_port }}/v1/acl/policy/autoeligibility"
        ca_path: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_ca_pubkey }}"
        client_cert: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_cert_server }}"
        client_key: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_privatekey_server }}"
        method: POST
        headers:
          X-Nomad-Token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_management_token', missing='error') }}"
        body: |
          {
            "Name": "autoeligibility",
            "Description": "Nomad policy for single mode install operations (drain)",
            "Rules": "node {\n  policy = \"write\"\n}\n\nagent {\n  policy = \"write\"\n}"
          }
        body_format: json
        status_code:
          - 200
          - 201
      when: '"autoeligibility" not in nomad_policies_list'

    - name: "Nomad Policy | Warning policy already created"
      ansible.builtin.debug:
        msg: "Policy already created"
        verbosity: 1
      when: '"autoeligibility" in nomad_policies_list'

    - name: "Nomad Token | Get tokens list"
      ansible.builtin.uri:
        url: "{{ nomad_http_scheme }}://{{ nomad_http_ip }}:{{ nomad_http_port }}/v1/acl/tokens"
        ca_path: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_ca_pubkey }}"
        client_cert: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_cert_server }}"
        client_key: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_privatekey_server }}"
        method: GET
        headers:
          X-Nomad-Token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_management_token', missing='error') }}"
        status_code:
          - 200
          - 404
        return_content: true
      register: nomad_tokens_list_raw

    - name: "Nomad Token | Set tokens list fact"
      ansible.builtin.set_fact:
        nomad_tokens_list: "{{ nomad_tokens_list_raw.json | community.general.json_query('[*].Name') | string }}"

    - name: "Nomad Token | Debug nomad_tokens_list"
      ansible.builtin.debug:
        msg: "{{ nomad_tokens_list }}"
        verbosity: 1

    - name: Block
      block:
        - name: "Nomad Install | Read Nomad nomad autoeligibility token"
          ansible.builtin.set_fact:
            nomad_autoeligibility_token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_autoeligibility_token', missing='error') }}"

      rescue:
        - name: "Nomad Token | Create token for Nomad access autoeligibility"
          ansible.builtin.uri:
            url: "{{ nomad_http_scheme }}://{{ nomad_http_ip }}:{{ nomad_http_port }}/v1/acl/token"
            ca_path: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_ca_pubkey }}"
            client_cert: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_cert_server }}"
            client_key: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_privatekey_server }}"
            method: PUT
            headers:
              X-Nomad-Token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_management_token', missing='error') }}"
            body: |
              {
                "Name": "autoeligibility",
                "Type": "client",
                "Policies": ["autoeligibility"],
                "Global": false
              }
            body_format: json
            status_code:
              - 200
          register: nomad_new_token_name

        - name: "Nomad Install | Set Nomad Autoeligibility token and insert in PasswordStore"
          ansible.builtin.set_fact:
            nomad_autoeligibility_token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_autoeligibility_token', missing='create', userpass=nomad_new_token_name.json.SecretID) }}"

