---
- name: "Nomad Policy | Get policies list"
  ansible.builtin.uri:
    url: "{{ nomad_http_scheme }}://{{ nomad_http_ip }}:{{ nomad_http_port }}/v1/acl/policies"
    ca_path: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_ca_pubkey }}"
    client_cert: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_cert_server }}"
    client_key: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_privatekey_server }}"
    method: GET
    headers:
      X-Nomad-Token: "{{ nomad_management_token | default(ansible_local.nomad_management_token.nomad_management_token) }}"
    status_code:
      - 200
      - 404
    return_content: true
  register: nomad_policies_list_raw

- name: "Nomad Policy | Set policies list fact"
  ansible.builtin.set_fact:
    nomad_policies_list: "{{ nomad_policies_list_raw.json | community.general.json_query('[*].Name') | string }}"

- name: "Nomad Policy | Create policy for Nomad access autoeligibility"
  ansible.builtin.uri:
    url: "{{ nomad_http_scheme }}://{{ nomad_http_ip }}:{{ nomad_http_port }}/v1/acl/policy/autoeligibility"
    ca_path: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_ca_pubkey }}"
    client_cert: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_cert_server }}"
    client_key: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_privatekey_server }}"
    method: POST
    headers:
      X-Nomad-Token: "{{ nomad_management_token | default(ansible_local.nomad_management_token.nomad_management_token) }}"
    body: |
      {
        "Name": "autoeligibility",
        "Description": "Nomad policy for single mode install operations (drain)",
        "Rules": "node {\n  policy = \"write\"\n}\n\nagent {\n  policy = \"write\"\n}"
      }
    body_format: json
    status_code:
      - 200
      - 201
  when: '"autoeligibility" not in nomad_policies_list'

- name: "Nomad Policy | Warning policy already created"
  ansible.builtin.debug:
    msg: "Policy already created"
    verbosity: 1
  when: '"autoeligibility" in nomad_policies_list'

- name: "Nomad Token | Get tokens list"
  ansible.builtin.uri:
    url: "{{ nomad_http_scheme }}://{{ nomad_http_ip }}:{{ nomad_http_port }}/v1/acl/tokens"
    ca_path: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_ca_pubkey }}"
    client_cert: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_cert_server }}"
    client_key: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_privatekey_server }}"
    method: GET
    headers:
      X-Nomad-Token: "{{ nomad_management_token | default(ansible_local.nomad_management_token.nomad_management_token) }}"
    status_code:
      - 200
      - 404
    return_content: true
  register: nomad_tokens_list_raw

- name: "Nomad Token | Set tokens list fact"
  ansible.builtin.set_fact:
    nomad_tokens_list: "{{ nomad_tokens_list_raw.json | community.general.json_query('[*].Name') | string }}"

- name: "Nomad Token | Create token for Nomad access autoeligibility"
  ansible.builtin.uri:
    url: "{{ nomad_http_scheme }}://{{ nomad_http_ip }}:{{ nomad_http_port }}/v1/acl/token"
    ca_path: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_ca_pubkey }}"
    client_cert: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_cert_server }}"
    client_key: "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_privatekey_server }}"
    method: PUT
    headers:
      X-Nomad-Token: "{{ nomad_management_token | default(ansible_local.nomad_management_token.nomad_management_token) }}"
    body: |
      {
        "Name": "autoeligibility",
        "Type": "client",
        "Policies": ["autoeligibility"],
        "Global": false
      }
    body_format: json
    status_code:
      - 200
  register: nomad_new_token_name
  when: '"autoeligibility" not in nomad_tokens_list'

- name: "Nomad Token | Warning already created"
  ansible.builtin.debug:
    msg: "Token already created"
    verbosity: 1
  when: '"autoeligibility" in nomad_tokens_list'

- name: "Nomad Install | Set Nomad Autoeligibility token and insert in PasswordStore"
  ansible.builtin.set_fact:
    nomad_autoeligibility_token: "{{ lookup('community.general.passwordstore', 'nomad/' + inventory_hostname + '/nomad_autoeligibility_token', missing='create', userpass=nomad_new_token_name.json.SecretID) }}"
  when: nomad_autoeligibility_token is not defined and ansible_local.nomad_autoeligibility_token.nomad_autoeligibility_token is not defined

- name: "Nomad Install | Read Nomad Autoeligibility token from PasswordStore"
  ansible.builtin.set_fact:
    nomad_autoeligibility_token: "{{ lookup('community.general.passwordstore', 'nomad/' + inventory_hostname + '/nomad_autoeligibility_token') }}"
  when: nomad_autoeligibility_token is not defined

- name: "Nomad Install | Set Nomad Autoeligibility token init done local facts"
  ansible.builtin.copy:
    dest: /etc/ansible/facts.d/nomad_autoeligibility_token.fact
    content: |
      {
        "nomad_autoeligibility_token": "init_done"
      }
    mode: "0600"
  when: ansible_local.nomad_autoeligibility_token.nomad_autoeligibility_token is not defined
