name = "{{ nomad_node_name }}"
region = "{{ nomad_region }}"
datacenter = "{{ nomad_dc_name }}"

disable_anonymous_signature = {{ nomad_disable_anonymous_signature | lower }}
disable_update_check = {{ nomad_disable_update_check | lower }}

data_dir = "{{ nomad_data_dir }}"

bind_addr = "{{ nomad_bind_address }}"

advertise {
    http = "{{ nomad_advertise_address }}:{{ nomad_ports.http }}"
    rpc = "{{ nomad_advertise_address }}:{{ nomad_ports.rpc }}"
    serf = "{{ nomad_advertise_address }}:{{ nomad_ports.serf }}"
}
ports {
    http = {{ nomad_ports.http }}
    rpc = {{ nomad_ports.rpc }}
    serf = {{ nomad_ports.serf }}
}

enable_debug = {{ nomad_debug | lower }}
log_file = "{{ nomad_log_file }}"
log_level = "{{ nomad_log_level }}"
log_rotate_bytes = {{ nomad_log_rotate_bytes }}
log_rotate_duration = "{{ nomad_log_rotate_duration }}"
log_rotate_max_files = {{ nomad_log_rotate_max_files }}

leave_on_terminate = {{ nomad_leave_on_terminate | lower }}
leave_on_interrupt = {{ nomad_leave_on_interrupt | lower }}

tls {
    http = true
    rpc = true
    ca_file = "{{ nomad_tls_host_certificate_dir }}/{{ nomad_tls_ca_pubkey }}"
    cert_file = "{{ nomad_tls_host_certificate_dir }}/{{ (nomad_node_role == 'client') | ternary(nomad_tls_cert_client, nomad_tls_cert_server) }}"
    key_file = "{{ nomad_tls_host_certificate_dir }}/{{ (nomad_node_role == 'client') | ternary(nomad_tls_privatekey_client, nomad_tls_privatekey_server) }}"
    rpc_upgrade_mode = {{ nomad_tls_rpc_upgrade_mode | lower }}
    verify_server_hostname = {{ nomad_tls_verify_server_hostname | lower }}
    verify_https_client = {{ nomad_tls_verify_https_client | lower }}
}

acl {
    enabled = {{ nomad_acl_enabled | lower }}
    token_ttl = "{{ nomad_acl_token_ttl }}"
    policy_ttl = "{{ nomad_acl_policy_ttl }}"
    replication_token = "{{ nomad_acl_replication_token }}"
}

telemetry {
    disable_hostname = {{ nomad_telemetry_disable_hostname | lower }}
    collection_interval = "{{ nomad_telemetry_collection_interval }}"
    use_node_name = {{ nomad_telemetry_use_node_name | lower }}
    publish_allocation_metrics = {{ nomad_telemetry_publish_allocation_metrics | lower }}
    publish_node_metrics = {{ nomad_telemetry_publish_node_metrics | lower }}
    filter_default = {{ nomad_telemetry_filter_default | lower }}
    prefix_filter = []
    disable_dispatched_job_summary_metrics = {{ nomad_telemetry_disable_dispatched_job_summary_metrics | lower }}
    statsite_address = ""
    statsd_address = ""
    datadog_address = ""
    datadog_tags = []
    prometheus_metrics = {{ nomad_telemetry_prometheus_metrics | lower }}
    circonus_api_token = ""
    circonus_api_app = "{{ nomad_telemetry_circonus_api_app }}"
    circonus_api_url = "{{ nomad_telemetry_circonus_api_url }}"
    circonus_submission_interval = "{{ nomad_telemetry_circonus_submission_interval }}"
    circonus_submission_url = ""
    circonus_check_id = ""
    circonus_check_force_metric_activation = {{ nomad_telemetry_circonus_check_force_metric_activation | lower }}
    circonus_check_instance_id = ""
    circonus_check_search_tag = ""
    circonus_check_display_name = ""
    circonus_check_tags = ""
    circonus_broker_id = ""
    circonus_broker_select_tag = ""
}

autopilot {
    cleanup_dead_servers      = {{ nomad_autopilot_cleanup_dead_servers | lower }}
    last_contact_threshold    = "{{ nomad_autopilot_last_contact_threshold }}"
    max_trailing_logs         = {{ nomad_autopilot_max_trailing_logs }}
    server_stabilization_time = "{{ nomad_autopilot_server_stabilization_time }}"
}

limits {
  http_max_conns_per_client = 300
  rpc_max_conns_per_client = 300
}

ui {
  enabled =  {{ nomad_ui_enabled | lower }}

  content_security_policy {
    connect_src     = ["{{ nomad_ui_content_security_policy_connect_src }}"]
    default_src     = ["{{ nomad_ui_content_security_policy_default_src }}"]
    form_action     = ["{{ nomad_ui_content_security_policy_form_action }}"]
    frame_ancestors = ["{{ nomad_ui_content_security_policy_frame_ancestors }}"]
    img_src         = ["'self'","data:"]
    script_src      = ["{{ nomad_ui_content_security_policy_script_src }}"]
    style_src       = ["'self'","'unsafe-inline'"]
  }

  label {
    text             = "{{ nomad_ui_label_text }}"
    background_color = "{{ nomad_ui_label_background_color }}"
    text_color       = "{{ nomad_ui_label_text_color }}"
  }
}
