---
- name: Include upstream variables
  ansible.builtin.include_vars: upstream.yml

- name: Set custom variables
  ansible.builtin.set_fact:
    image_version: "{{ latest_version }}"
    image_name: "{{ image.name }}"
    image_labels: "{{ image.labels }}"
    image_build: "{{ image.build }}"

- name: No new version
  ansible.builtin.fail:
    msg: There is no new version yet
  when: >
    ansible_local.software_version is defined and
    image.name in ansible_local.software_version and
    ansible_local.software_version[image.name] == image_version

- name: Create temporary directories
  ansible.builtin.file:
    path: "{{ item }}"
    recurse: true
    state: directory
    mode: '0755'
  loop:
    - "{{ build_work_dir }}/download"
    - "{{ build_work_dir }}/{{ upstream_default_arch }}"

- name: Get binary
  block:
    - name: Download Github release
      ansible.builtin.get_url:
        url: "{{ upstream_file_url }}"
        dest: "{{ build_work_dir }}/download/"
        mode: '0644'
        force: no
      register: download_result

    - name: Unarchive GitHub release
      ansible.builtin.unarchive:
        src: "{{ build_work_dir }}/download/{{ upstream_file_name }}"
        dest: "{{ build_work_dir }}/download"
        remote_src: true
      when: download_result.changed

    - name: Find binary
      ansible.builtin.include_role:
        name: upstream
        tasks_from: find-binary
      loop:
        - "{{ image.upstream.binary }}"

    - name: Install binary
      ansible.builtin.copy:
        src: "{{ build_work_dir }}/{{ upstream_default_arch }}/{{ image.upstream.binary }}"
        dest: "/usr/local/bin/"
        owner: root
        group: root
        mode: '0755'
        remote_src: true

- name: Clean up
  ansible.builtin.file:
    path: "{{ build_work_dir }}"
    state: absent

- name: Update software version
  software_version:
    software: "{{ image_name }}"
    version: "{{ image_version }}"
    file_path: /etc/ansible/facts.d/software_version.fact
