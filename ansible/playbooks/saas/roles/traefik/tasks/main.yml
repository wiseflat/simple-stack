---
- name: "Traefik | Nomad | Get all policies"
  ansible.builtin.uri:
    url: "https://{{ nomad_http_ip }}:4646/v1/acl/policies"
    ca_path: "/etc/ssl/simplestack/simplestack-ca.pem"
    client_cert: "/etc/ssl/simplestack/{{ fact_instance.datacenter }}-server-nomad.pem"
    client_key: "/etc/ssl/simplestack/{{ fact_instance.datacenter }}-server-nomad.key"
    method: GET
    headers:
      X-Nomad-Token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_management_token', missing='error') }}"
    status_code:
      - 200
      - 404
    return_content: true
  register: nomad_policies_list_raw

- name: "Traefik | Nomad | Create policy for traefik"
  ansible.builtin.uri:
    url: "https://{{ nomad_http_ip }}:4646/v1/acl/policy/traefik"
    ca_path: "/etc/ssl/simplestack/simplestack-ca.pem"
    client_cert: "/etc/ssl/simplestack/{{ fact_instance.datacenter }}-server-nomad.pem"
    client_key: "/etc/ssl/simplestack/{{ fact_instance.datacenter }}-server-nomad.key"
    method: POST
    headers:
      X-Nomad-Token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_management_token', missing='error') }}"
    body: |
      {
        "Name": "traefik",
        "Description": "Nomad policy for Traefik Nomad provider",
        "Rules": "namespace \"default\" {\n policy = \"read\"\n capabilities = [\"read-job\"]\n }\n"
      }
    body_format: json
    status_code:
      - 200
      - 201
  vars:
    nomad_policies_list: "{{ nomad_policies_list_raw.json | community.general.json_query('[*].Name') | string }}"
  when: '"traefik" not in nomad_policies_list'

- name: "Traefik | Nomad | Get all tokens"
  ansible.builtin.uri:
    url: "https://{{ nomad_http_ip }}:4646/v1/acl/tokens"
    ca_path: "/etc/ssl/simplestack/simplestack-ca.pem"
    client_cert: "/etc/ssl/simplestack/{{ fact_instance.datacenter }}-server-nomad.pem"
    client_key: "/etc/ssl/simplestack/{{ fact_instance.datacenter }}-server-nomad.key"
    method: GET
    headers:
      X-Nomad-Token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_management_token', missing='error') }}"
    status_code:
      - 200
      - 404
    return_content: true
  register: nomad_tokens_list_raw

- name: "Traefik | Nomad | Create token for traefik"
  ansible.builtin.uri:
    url: "https://{{ nomad_http_ip }}:4646/v1/acl/token"
    ca_path: "/etc/ssl/simplestack/simplestack-ca.pem"
    client_cert: "/etc/ssl/simplestack/{{ fact_instance.datacenter }}-server-nomad.pem"
    client_key: "/etc/ssl/simplestack/{{ fact_instance.datacenter }}-server-nomad.key"
    method: PUT
    headers:
      X-Nomad-Token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_management_token', missing='error') }}"
    body: |
      {
        "Name": "traefik",
        "Type": "client",
        "Policies": ["traefik"],
        "Global": false
      }
    body_format: json
    status_code:
      - 200
  vars:
    nomad_tokens_list: "{{ nomad_tokens_list_raw.json | community.general.json_query('[*].Name') | string }}"
  register: nomad_new_token_name
  when: '"traefik" not in nomad_tokens_list'

- name: "Traefik | Save token to passwordstore"
  ansible.builtin.set_fact:
    nomad_traefik_token: "{{ lookup('simple-stack-ui', type='secret', key=inventory_hostname, subkey='nomad_traefik_token', missing='create', userpass=nomad_new_token_name.json.SecretID) }}"
  when: nomad_new_token_name.json is defined

- name: Create default directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - "{{ software_path }}"
    - "{{ software_path }}/letsencrypt"
    - /var/log/traefik

- name: Copy config files
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ software_path }}/{{ item }}"
    owner: root
    group: root
    mode: '0600'
  loop:
    - traefik.toml
    - traefik_tls.toml

- name: Copy nomad job to destination
  ansible.builtin.template:
    src: nomad.hcl
    dest: "/var/tmp/{{ domain }}.nomad"
    owner: root
    group: root
    mode: '0600'
  become: true

- name: Run nomad job
  ansible.builtin.include_role:
    name: nomad
    tasks_from: job_run.yml
