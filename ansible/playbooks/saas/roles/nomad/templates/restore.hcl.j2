job "{{ nomad_job_name }}" {
  region = "{{ fact_instance.region }}"
  datacenters = ["{{ fact_instance.datacenter }}"]
  type = "batch"

  constraint {
    attribute    = "${meta.location}"
    set_contains = "{{ fact_instance.location }}"
  }

  constraint {
    attribute    = "${meta.instance}"
    set_contains = "{{ inventory_hostname }}"
  }

  group "{{ operation }}" {
    count = 1

{% if restic_backup is defined and restic_backup %}
    task "{{ domain }}-restic-restore" {
      lifecycle {
        hook = "prestart"
      }
      driver = "docker"
      env {
        RESTIC_SERVER = "{{ restic_server }}"
        RESTIC_HOST = "{{ restic_host }}"
        RESTIC_REPOSITORY = "{{ domain }}"
        RESTIC_PASSWORD = "{{ lookup('community.general.passwordstore', 'minio/' + restic_server, subkey='passwd') }}"
        AWS_ACCESS_KEY_ID = "{{ lookup('community.general.passwordstore', 'minio/' + restic_server, subkey='user') }}"
        AWS_SECRET_ACCESS_KEY = "{{ lookup('community.general.passwordstore', 'minio/' + restic_server, subkey='passwd') }}"
      }
      config {
        image = "alpine:latest"
        volumes = ["/usr/local/bin/restic-restore:/usr/local/bin/restic-restore:ro","/usr/local/bin/restic:/usr/local/bin/restic:ro",{% for volume in actions.volumes %}"{{ volume }}"{% if not loop.last %},{% endif %}{% endfor %}]
        command = "sh"
        args    = ["-c", "/usr/local/bin/restic-restore"]
      }
    }

    task "{{ domain }}-clean" {
      lifecycle {
        hook = "poststop"
      }
      driver = "docker"
      config {
        image = "alpine:latest"
        command = "sh"
        args    = ["-c", "/bin/rm -rfv /var/backup/*"]
        volumes = [
          "{{ software_path }}/var/backup:/var/backup:rw"
        ]
      }
    }
{% endif %}

    task "{{ domain }}-software-restore" {
      driver = "docker"
      env {
        {{ actions.environment | default(omit) }}
      }
      user = "{{ actions.user | default('root') }}"
      config {
        image = "{{ actions.image }}"
        volumes = [{% for volume in actions.volumes %}"{{ volume }}"{% if not loop.last %},{% endif %}{% endfor %}]
        command = "sh"
        args    = ["-c", "/usr/local/bin/{{ software }}-restore {{ service_name }}"]
      }
    }
  }
}
