job "{{ nomad_job_name }}" {
  region = "{{ fact_instance.region }}"
  datacenters = ["{{ fact_instance.datacenter }}"]
  type = "batch"

{% if software.constraints is defined and software.constraints.location is defined %}
  constraint {
    attribute    = "${meta.location}"
    set_contains = "{{ software.constraints.location }}"
  }
{% endif %}

  constraint {
    attribute    = "${meta.instance}"
    set_contains = "{{ software.instance }}"
  }

{% if periodic %}
    periodic {
      crons = [
        "{{ 60 | random(seed=domain) }} {{ 24 | random(seed=domain) }} * * * *"
      ]
      prohibit_overlap = true
    }
{% endif %}

  group "backup" {
    count = 1

    task "{{ domain }}-backup" {
      lifecycle {
        hook = "prestart"
      }
      driver = "docker"
      env {
        {{ actions.environment | default(omit) }}
      }
      user = "{{ actions.user | default('root') }}"
      config {
        image = "{{ actions.image }}"
        volumes = [{% for volume in actions.volumes %}"{{ volume }}"{% if not loop.last %},{% endif %}{% endfor %}]
        command = "sh"
        args    = ["-c", "/usr/local/bin/{{ catalog }}-backup {{ service_name }}"]
      }
      resources {
        cpu = 512
        memory = 128
        memory_max = 1024
      }
    }

{% if restic_backup is defined and restic_backup %}
    task "{{ domain }}-export" {
      driver = "docker"
      env {
        RESTIC_SERVER = "{{ restic_server }}"
        RESTIC_HOST = "{{ restic_host }}"
        RESTIC_SNAPSHOTS = "{{ restic_snapshots }}"
        RESTIC_REPOSITORY = "{{ domain | lower }}"
        RESTIC_PASSWORD = "{{ lookup('simple-stack-ui', type='secret', key=restic_server, subkey='passwd', missing='error') }}"
        AWS_ACCESS_KEY_ID = "{{ lookup('simple-stack-ui', type='secret', key=restic_server, subkey='user', missing='error') }}"
        AWS_SECRET_ACCESS_KEY = "{{ lookup('simple-stack-ui', type='secret', key=restic_server, subkey='passwd', missing='error') }}"
      }
      config {
        image = "alpine:latest"
        volumes = ["/usr/local/bin/restic-backup:/usr/local/bin/restic-backup:ro","/usr/local/bin/restic:/usr/local/bin/restic:ro",{% for volume in actions.volumes %}"{{ volume }}"{% if not loop.last %},{% endif %}{% endfor %}]
        command = "sh"
        args    = ["-c", "/usr/local/bin/restic-backup"]
      }
      resources {
        cpu = 512
        memory = 128
        memory_max = 1024
      }
    }
{% endif %}

    task "{{ domain }}-clean" {
      lifecycle {
        hook = "poststop"
      }
      driver = "docker"
      config {
        image = "alpine:latest"
        command = "sh"
        args    = ["-c", "/bin/rm -rfv /var/backup/*"]
        volumes = [
          "{{ software_path }}/var/backup:/var/backup:rw"
        ]
      }
    }
  }
}
