---
- name: Deploy an application
  any_errors_fatal: true
  hosts: "{{ hosts_limit | default('infrastructure') }}"
  gather_facts: true
  become: true
  vars_prompt:
    - name: software
      prompt: Software name
      private: false
    - name: domain
      prompt: Domain name
      private: false
    - name: confirmation
      prompt: You are going to configure a software on {{ play_hosts | length }} servers.
              Answer "yes" to confirm, something else to abort.
      private: false
      default: "yes"
  vars:
    software_path: "/data/{{ domain }}"
    service_name: "{{ domain | replace('-', '') | replace('.', '') }}"
    software_vars: "{{ hostvars[inventory_hostname][domain] }}"
    host_software_vars: "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}/{{ domain }}.yml"
  pre_tasks:
    - name: Fail if you didn't confirm
      ansible.builtin.fail:
        msg: You didn't answered "yes". Aborting.
      when: confirmation != "yes"

    - name: Add custom passwordstore secrets
      debug:
        msg: "{{ lookup('community.general.passwordstore', software + '/' + domain, missing='create', subkey=item.key,  userpass=item.value | default(none)) }}"
      loop: "{{ software_vars.passwordstore }}"
      when: software_vars.passwordstore is defined

  tasks:
    - name: Deploy service
      ansible.builtin.include_role:
        name: "{{ software }}"

  post_tasks:
    - name: Initialize bucket
      ansible.builtin.shell:
        cmd: "/usr/local/bin/restic -r s3:https://{{ restic_server }}/{{ domain }} init"
      environment:
        RESTIC_REPOSITORY: "{{ domain }}"
        RESTIC_PASSWORD: "{{ lookup('community.general.passwordstore', 'minio/' + restic_server, subkey='passwd') }}"
        AWS_ACCESS_KEY_ID: "{{ lookup('community.general.passwordstore', 'minio/' + restic_server, subkey='user') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('community.general.passwordstore', 'minio/' + restic_server, subkey='passwd') }}"
      register: restic_init
      failed_when:
        - restic_init.rc >= 1 and "already initialized" not in restic_init.stderr
      changed_when:
        - '"already initialized" not in restic_init.stderr'
      no_log: true
      when: restic_backup is defined and restic_backup
